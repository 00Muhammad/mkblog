// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å—Ç–∞
document.addEventListener('DOMContentLoaded', function() {
    loadPostDetail();
    setupCommentForm();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞
function loadPostDetail() {
    const postId = parseInt(localStorage.getItem('currentPost'));
    const posts = JSON.parse(localStorage.getItem('mkblog_posts')) || [];
    const users = JSON.parse(localStorage.getItem('mkblog_users')) || [];
    const post = posts.find(p => p.id === postId);
    
    const postDetail = document.getElementById('postDetail');
    
    if (!post) {
        postDetail.innerHTML = '<div class="error-message">–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>';
        return;
    }
    
    const author = users.find(u => u.id === post.authorId) || { username: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π' };
    const commentCount = post.comments ? post.comments.length : 0;
    
    postDetail.innerHTML = `
        <article class="post-detail">
            <div class="post-header">
                <div class="author-info">
                    <div class="author-avatar" style="background: linear-gradient(135deg, ${getRandomColor()}, ${getRandomColor()})">
                        ${author.username.charAt(0).toUpperCase()}
                    </div>
                    <div>
                        <div class="author-name">${author.username}</div>
                        <div class="post-date">${formatDate(post.createdAt)}</div>
                    </div>
                </div>
                ${post.authorId === (getCurrentUser()?.id) ? `
                    <div class="post-actions">
                        <button class="btn btn-outline" onclick="editPostFromDetail(${post.id})">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                        <button class="btn btn-danger" onclick="deletePostFromDetail(${post.id})">–£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                ` : ''}
            </div>
            
            <h1 class="post-detail-title">${post.title}</h1>
            
            ${post.media ? `
                <div class="post-media-large">
                    ${post.media.type === 'image' ? 
                        `<img src="${post.media.url}" class="post-detail-image" alt="${post.title}">` : 
                        `<video controls class="post-detail-video">
                            <source src="${post.media.url}" type="video/mp4">
                        </video>`
                    }
                </div>
            ` : ''}
            
            <div class="post-detail-content">
                ${post.content.replace(/\n/g, '<br>')}
            </div>
            
            <div class="post-stats">
                <button class="stat-btn like-btn ${isPostLiked(post) ? 'liked' : ''}" onclick="likePostFromDetail(${post.id})">
                    ‚ù§Ô∏è <span class="stat-count">${post.likes || 0}</span>
                </button>
                <div class="stat-btn">
                    üí¨ <span class="stat-count">${commentCount}</span>
                </div>
            </div>
        </article>
    `;
    
    loadComments(postId);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function loadComments(postId) {
    const posts = JSON.parse(localStorage.getItem('mkblog_posts')) || [];
    const users = JSON.parse(localStorage.getItem('mkblog_users')) || [];
    const post = posts.find(p => p.id === postId);
    const commentsList = document.getElementById('commentsList');
    
    if (!post || !post.comments || post.comments.length === 0) {
        commentsList.innerHTML = '<div class="no-comments">–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</div>';
        return;
    }
    
    commentsList.innerHTML = post.comments.map(comment => {
        const commentAuthor = users.find(u => u.id === comment.authorId) || { username: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π' };
        
        return `
            <div class="comment-item">
                <div class="comment-header">
                    <div class="comment-author">
                        <div class="comment-avatar" style="background: linear-gradient(135deg, ${getRandomColor()}, ${getRandomColor()})">
                            ${commentAuthor.username.charAt(0).toUpperCase()}
                        </div>
                        <div>
                            <div class="comment-author-name">${commentAuthor.username}</div>
                            <div class="comment-date">${formatDate(comment.date)}</div>
                        </div>
                    </div>
                    <div class="comment-actions">
                        <button class="comment-like-btn ${isCommentLiked(comment) ? 'liked' : ''}" 
                                onclick="likeComment(${postId}, ${comment.id})">
                            ‚ù§Ô∏è <span class="like-count">${comment.likes || 0}</span>
                        </button>
                    </div>
                </div>
                <div class="comment-text">${comment.text}</div>
            </div>
        `;
    }).join('');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function setupCommentForm() {
    document.getElementById('commentForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (!isLoggedIn()) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏');
            return;
        }
        
        const postId = parseInt(localStorage.getItem('currentPost'));
        const text = document.getElementById('commentText').value;
        const currentUser = getCurrentUser();
        
        if (!text.trim()) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
            return;
        }
        
        const newComment = {
            id: Date.now(),
            authorId: currentUser.id,
            text: text,
            date: new Date().toISOString(),
            likes: 0,
            likedBy: []
        };
        
        addCommentToPost(postId, newComment);
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É
function addCommentToPost(postId, comment) {
    const posts = JSON.parse(localStorage.getItem('mkblog_posts')) || [];
    const postIndex = posts.findIndex(p => p.id === postId);
    
    if (postIndex !== -1) {
        if (!posts[postIndex].comments) {
            posts[postIndex].comments = [];
        }
        posts[postIndex].comments.unshift(comment);
        localStorage.setItem('mkblog_posts', JSON.stringify(posts));
        
        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        document.getElementById('commentForm').reset();
        loadComments(postId);
        updateCommentCount();
    }
}

// –õ–∞–π–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function likeComment(postId, commentId) {
    if (!isLoggedIn()) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á—Ç–æ–±—ã —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏');
        return;
    }
    
    const posts = JSON.parse(localStorage.getItem('mkblog_posts')) || [];
    const postIndex = posts.findIndex(p => p.id === postId);
    const currentUser = getCurrentUser();
    
    if (postIndex !== -1 && posts[postIndex].comments) {
        const commentIndex = posts[postIndex].comments.findIndex(c => c.id === commentId);
        
        if (commentIndex !== -1) {
            const comment = posts[postIndex].comments[commentIndex];
            
            if (!comment.likes) comment.likes = 0;
            if (!comment.likedBy) comment.likedBy = [];
            
            const userLiked = comment.likedBy.includes(currentUser.id);
            
            if (userLiked) {
                comment.likes--;
                comment.likedBy = comment.likedBy.filter(id => id !== currentUser.id);
            } else {
                comment.likes++;
                comment.likedBy.push(currentUser.id);
            }
            
            localStorage.setItem('mkblog_posts', JSON.stringify(posts));
            loadComments(postId);
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞–π–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function isCommentLiked(comment) {
    const currentUser = getCurrentUser();
    return currentUser && comment.likedBy && comment.likedBy.includes(currentUser.id);
}

// –õ–∞–π–∫ –ø–æ—Å—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π
function likePostFromDetail(postId) {
    likePost(postId);
    loadPostDetail(); // –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function updateCommentCount() {
    const postId = parseInt(localStorage.getItem('currentPost'));
    const posts = JSON.parse(localStorage.getItem('mkblog_posts')) || [];
    const post = posts.find(p => p.id === postId);
    
    if (post) {
        const commentCount = post.comments ? post.comments.length : 0;
        const commentElements = document.querySelectorAll('.stat-count');
        commentElements[1].textContent = commentCount;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π
function deletePostFromDetail(postId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?')) {
        const posts = JSON.parse(localStorage.getItem('mkblog_posts')) || [];
        const updatedPosts = posts.filter(p => p.id !== postId);
        localStorage.setItem('mkblog_posts', JSON.stringify(updatedPosts));
        
        alert('–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
        window.location.href = 'dashboard.html';
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π
function editPostFromDetail(postId) {
    localStorage.setItem('editingPost', postId);
    window.location.href = 'dashboard.html';
}